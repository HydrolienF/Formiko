# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Maven main

on:
  pull_request:
    branches: [ master ]
    types: [closed]

jobs:
  releaseJob:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: chmod
      run: chmod 700 *.sh
    - name: Set up JDK 16
      uses: actions/setup-java@v1
      with:
        java-version: 16
    - name: exe.sh
      run: ./exe.sh
    - name: version
      run: echo "::set-output name=version::$(cat version.md)"
      id: version
    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: Formiko${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: upload Linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}Linux.zip
        asset_name: Formiko${{ steps.version.outputs.version }}Linux.zip
        asset_content_type: application/zip
    - name: upload Windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}Windows.zip
        asset_name: Formiko${{ steps.version.outputs.version }}Windows.zip
        asset_content_type: application/zip
    - name: upload Mac artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}Mac.zip
        asset_name: Formiko${{ steps.version.outputs.version }}Mac.zip
        asset_content_type: application/zip
    - name: upload .jar artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}.zip
        asset_name: Formiko${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
        
    - name: dataVersionChange
      run: echo "::set-output name=dataVersionChangeVal::$(./needToReleaseData.sh)"
      id: dataVersionChange
    - name: commit version.json
      if: ${{ steps.dataVersionChange.outputs.dataVersionChangeVal == '1' }}
      run: |
        echo "echo \"0\"" > needToReleaseData.sh
        if [[ `git status --untracked-files=no --porcelain docs/` != "\n" ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.json
          git add needToReleaseData.sh
          git commit -m "Auto data version update"
          git pull
          git push
        fi
    - name: upload data artifact
      #if: ${{ github.ref == 'refs/heads/main' }}
      if: ${{ steps.dataVersionChange.outputs.dataVersionChangeVal == '1' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/data.zip
        asset_name: data.zip
        asset_content_type: application/zip
        
  WindowsArtifact:
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: windows-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Set up JDK 16
      uses: actions/setup-java@v1
      with:
        java-version: 16
    - name: version
      run: echo "::set-output name=version::$(cat version.md)"
      id: version
    - name: jlink
      run: |
        echo "download jlink/"
        ./run.sh download "https://github.com/HydrolienF/JRE/releases/download/1.0.1/jlink.zip" jlink.zip
        ./run.sh unzip jlink.zip jlink/
    - name: build
      run: |
        ./toMsi.ps1
        mv ./out/Formiko-${{ steps.version.outputs.version }}.msi ./out/Formiko${{ steps.version.outputs.version }}.msi
    - name: upload .msi artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{needs.releaseJob.outputs.output1}}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}.msi
        asset_name: Formiko${{ steps.version.outputs.version }}.msi
        asset_content_type: application/msi
      
        
  # Badge part
  badge:
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Set up JDK 16
      uses: actions/setup-java@v1
      with:
        java-version: 16
    - name: Generate Badges files
      run: mvn -ntp compile test exec:java -Dargs="createBadges"
      id: badgeFile
    
#     - name: Generate version Badge
#       uses: popsiclestick/gist-sync-action@v1.2.0
#       id: sync
#       with:
#         auth: ${{ secrets.GIST_TOKEN }}
#         gist_url: https://gist.github.com//HydrolienF/c7dbc5d2d61b749ff6878e93afdaf53e/raw/version.json
#         #gist_url: https://gist.githubusercontent.com/HydrolienF/c7dbc5d2d61b749ff6878e93afdaf53e/raw/version.json
#         gist_title: version.json
#         gist_description: ""
#         github_file: "temp"

    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2.0.1

    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

    - name: Commit the badges (if it changed)
      run: |
        if [[ `git status --untracked-files=no --porcelain .github/badges/` != "\n" ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/badges/*
          git commit -m "Autogenerated badges"
          git pull
          git push
        fi

    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report
        path: target/site/jacoco/
