name: Maven main

on:
  pull_request:
    branches: [ master ]
    types: [closed]

env:
  JAVA_VERSION: '18'
  JAVA_DISTRIBUTION: 'temurin'
  JRE_VERSION: '18.0.1'
  GITHUB_TOKEN: ${{ github.token }}
  ARTIFACT_NAME: 'Formiko'
  MAIN_CLASS: 'fr.formiko.formiko.Main'

jobs:
  releaseJob:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}
    - name: chmod
      run: chmod 700 *.sh

    - name: Version-Tool
      uses: HydrolienF/Version-Tool@0.6.4
      id: version

    - name: update version.md
      run: echo ${{ steps.version.outputs.version }} > version.md

    - name: dataVersionChange
      run: echo "::set-output name=dataVersionChangeVal::$(./needToReleaseData.sh)"
      id: dataVersionChange
    - name: musicVersionChange
      run: echo "::set-output name=musicVersionChangeVal::$(./needToReleaseMusic.sh)"
      id: musicVersionChange

    - name: use curent data
      if: ${{ steps.dataVersionChange.outputs.dataVersionChangeVal == '1' || steps.musicVersionChange.outputs.musicVersionChangeVal == '1'}}
      run: |
        mkdir ~/.formiko/
        rm -fr ~/.formiko/data/
        cp -r data/ ~/.formiko/data/

    - name: jlink
      run: |
        mvn -ntp compile
        echo "download jlink/"
        mvn -ntp exec:java -Dargs='download https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink.zip'
        mvn -ntp exec:java -Dargs='unzip jlink.zip jlink/'
        ls jlink/

    - name: exe.sh
      run: |
        echo "${{ env.JRE_VERSION }}" > JREVersion.md
        ./exe.sh

    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: true
        release_name: Formiko${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
    - name: upload Linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}Linux.zip
        asset_name: Formiko${{ steps.version.outputs.version }}Linux.zip
        asset_content_type: application/zip
    - name: upload Windows artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}Windows.zip
        asset_name: Formiko${{ steps.version.outputs.version }}Windows.zip
        asset_content_type: application/zip
    - name: upload Mac artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}Mac.zip
        asset_name: Formiko${{ steps.version.outputs.version }}Mac.zip
        asset_content_type: application/zip
    - name: upload .jar artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}.zip
        asset_name: Formiko${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip

    # - name: commit version.json
    #   if: ${{ steps.dataVersionChange.outputs.dataVersionChangeVal == '1' || steps.musicVersionChange.outputs.musicVersionChangeVal == '1'}}
    #   run: |
    #     # echo "echo \"0\"" > needToReleaseData.sh
    #     # echo "echo \"0\"" > needToReleaseMusic.sh
    #     if [[ `git status --untracked-files=no --porcelain docs/` != "\n" ]]; then
    #       git config --local user.email "action@github.com"
    #       git config --local user.name "GitHub Action"
    #       git config pull.rebase true
    #       git add version.json
    #       # git add needToRelease*.sh
    #       git commit -m "Auto data version update"
    #       git fetch
    #       git pull
    #       git push
    #     fi
    - name: upload data artifact
      #if: ${{ github.ref == 'refs/heads/main' }}
      if: ${{ steps.dataVersionChange.outputs.dataVersionChangeVal == '1' }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/data.zip
        asset_name: data.zip
        asset_content_type: application/zip
    - name: upload music artifact
      #if: ${{ github.ref == 'refs/heads/main' }}
      if: ${{ steps.musicVersionChange.outputs.musicVersionChangeVal == '1' }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/music.zip
        asset_name: music.zip
        asset_content_type: application/zip

    - name: commit version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git config pull.rebase true
        git add version.md
        git add version.json
        git commit -m "Auto data version update"
        git restore .
        git fetch
        git pull
        git push

  WindowsArtifact:
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    - name: jlink
      run: |
        mvn -ntp compile
        echo "download jlink/"
        mvn -ntp exec:java -Dargs='download https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink.zip'
        mvn -ntp exec:java -Dargs='unzip jlink.zip jlink/'
        dir jlink/
    - name: Pull
      run: |
        git config pull.rebase false
        git pull

    - name: version
      id: version
      shell: pwsh
      run: |
        $version = cat version.md
        echo "-------------"
        echo $version
        echo "-------------"
        echo "::set-output name=version::$version"

    - name: build
      shell: pwsh
      run: |
        # Start of commun par with all OS
        mvn -ntp versions:set -DnewVersion="$(cat version.md)"
        mvn -ntp exec:java -Dargs='download https://github.com/HydrolienF/Formiko/releases/download/${{ steps.version.outputs.version }}/Formiko${{ steps.version.outputs.version }}.zip Formiko.zip'
        mvn -ntp exec:java -Dargs='unzip Formiko.zip formikotemp/'
        mv formikotemp/*/ in/
        # end of commun par with all OS
        jpackage --java-options "$(cat .mvn/jvm.config)" --input in -d out --name Formiko --main-jar Formiko.jar --main-class ${{ env.MAIN_CLASS }} --app-version ${{ steps.version.outputs.version }} --description "Formiko, a game about ant." --icon tools/icon.ico --runtime-image jlink/jWindows --win-shortcut --win-menu --win-menu-group "Formiko" --license-file LICENSE.md --vendor Hydrolien -t msi --win-upgrade-uuid "1468751e-078f-4fab-80e4-fa15e9b364b3"
        rm -r in
        cscript tools/addLaunchToMsi.js ${{ steps.version.outputs.version }}
        ls out/
        mv ./out/Formiko-${{ steps.version.outputs.version }}.msi ./out/Formiko${{ steps.version.outputs.version }}.msi
    - name: upload .msi artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{needs.releaseJob.outputs.output1}}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}.msi
        asset_name: Formiko${{ steps.version.outputs.version }}.msi
        asset_content_type: application/msi

  DebArtifact:
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    - name: jlink
      run: |
        mvn -ntp compile
        echo "download jlink/"
        mvn -ntp exec:java -Dargs='download https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink.zip'
        mvn -ntp exec:java -Dargs='unzip jlink.zip jlink/'
        ls jlink/
    - name: Pull
      run: |
        git config pull.rebase false
        git pull
    - name: version
      id: version
      run: |
        version=$(cat version.md)
        echo "-------------"
        echo $version
        echo "-------------"
        echo "::set-output name=version::$version"
    - name: build
      run: |
        # Start of commun par with all OS
        mvn -ntp versions:set -DnewVersion="$(cat version.md)"
        mvn -ntp exec:java -Dargs='download https://github.com/HydrolienF/Formiko/releases/download/${{ steps.version.outputs.version }}/Formiko${{ steps.version.outputs.version }}.zip Formiko.zip'
        mvn -ntp exec:java -Dargs='unzip Formiko.zip formikotemp/'
        mv formikotemp/*/ in/
        # end of commun par with all OS
        # TOFIX shortcut don't seem's to work neether in menu, nor in terminal.
        # TOFIX icon is not used on tab screen or in menu screen
        jpackage --java-options "$(cat .mvn/jvm.config)" --input in -d out --name Formiko --main-jar Formiko.jar --main-class ${{ env.MAIN_CLASS }} --app-version $(cat version.md) --description "Formiko, a game about ant." --icon tools/icon.png --runtime-image jlink/jLinux --license-file LICENSE.md --vendor Hydrolien -t deb --linux-package-name formiko --linux-shortcut --linux-deb-maintainer hydrolien.f@gmail.com --linux-menu-group "Game;StrategyGame" --linux-app-category games --resource-dir tools/debRessources/
        ls out/
        mv out/formiko_${{ steps.version.outputs.version }}_amd64.deb out/Formiko${{ steps.version.outputs.version }}.deb
    - name: upload .deb artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{needs.releaseJob.outputs.output1}}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}.deb
        asset_name: Formiko${{ steps.version.outputs.version }}.deb
        asset_content_type: application/deb

  DmgArtifact:
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    - name: jlink
      run: |
        mvn -ntp compile
        echo "download jlink/"
        mvn -ntp exec:java -Dargs='download https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink.zip'
        mvn -ntp exec:java -Dargs='unzip jlink.zip jlink/'
        ls jlink/
    - name: Pull
      run: |
        git config pull.rebase false
        git pull
    - name: version
      id: version
      run: |
        version=$(cat version.md)
        echo "-------------"
        echo $version
        echo "-------------"
        echo "::set-output name=version::$version"
    - name: build
      run: |
        # Start of commun par with all OS
        mvn -ntp versions:set -DnewVersion="$(cat version.md)"
        mvn -ntp exec:java -Dargs='download https://github.com/HydrolienF/Formiko/releases/download/${{ steps.version.outputs.version }}/Formiko${{ steps.version.outputs.version }}.zip Formiko.zip'
        mvn -ntp exec:java -Dargs='unzip Formiko.zip formikotemp/'
        mv formikotemp/*/ in/
        # end of commun par with all OS
        # TOFIX shortcut don't seem's to work neether in menu, nor in terminal.
        # TOFIX icon is not used on tab screen or in menu screen
        jpackage --java-options "$(cat .mvn/jvm.config)" --input in -d out --name Formiko --main-jar Formiko.jar --main-class ${{ env.MAIN_CLASS }} --app-version $(cat version.md) --description "Formiko, a game about ant." --icon tools/icon.icns --runtime-image jlink/jMac --license-file LICENSE.md --vendor Hydrolien -t dmg --mac-package-name formiko --mac-package-identifier "1468751e-078f-4fab-80e4-fa15e9b364b3"
        ls out/
        mv out/formiko-${{ steps.version.outputs.version }}.dmg out/Formiko${{ steps.version.outputs.version }}.dmg
    - name: upload .deb artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{needs.releaseJob.outputs.output1}}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}.dmg
        asset_name: Formiko${{ steps.version.outputs.version }}.dmg
        asset_content_type: application/dmg



  # Badge part
  badge:
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    - name: Pull
      run: |
        git config pull.rebase false
        git pull
    - name: Generate Badges files
      run: mvn -ntp compile test exec:java -Dargs="createBadges"
      id: badgeFile

#     - name: Generate version Badge
#       uses: popsiclestick/gist-sync-action@v1.2.0
#       id: sync
#       with:
#         auth: ${{ secrets.GIST_TOKEN }}
#         gist_url: https://gist.github.com//HydrolienF/c7dbc5d2d61b749ff6878e93afdaf53e/raw/version.json
#         #gist_url: https://gist.githubusercontent.com/HydrolienF/c7dbc5d2d61b749ff6878e93afdaf53e/raw/version.json
#         gist_title: version.json
#         gist_description: ""
#         github_file: "temp"

    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2.0.1

    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

    - name: Commit the badges (if it changed)
      run: |
        if [[ `git status --untracked-files=no --porcelain .github/badges/` != "" ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config pull.rebase true
          git add .github/badges/*
          git commit -m "Autogenerated badges"
          git restore .
          git fetch
          git pull
          git push
        fi

    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report
        path: target/site/jacoco/
